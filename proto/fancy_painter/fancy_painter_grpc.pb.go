// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: fancy_painter.proto

package fancy_painter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FancyPainterClient is the client API for FancyPainter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FancyPainterClient interface {
	// 测试接口
	GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRsp, error)
	// 用户登录接口
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRsp, error)
	// helloworld接口
	Helloworld(ctx context.Context, in *HelloworldReq, opts ...grpc.CallOption) (*HelloworldRsp, error)
}

type fancyPainterClient struct {
	cc grpc.ClientConnInterface
}

func NewFancyPainterClient(cc grpc.ClientConnInterface) FancyPainterClient {
	return &fancyPainterClient{cc}
}

func (c *fancyPainterClient) GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRsp, error) {
	out := new(UserRsp)
	err := c.cc.Invoke(ctx, "/xgrpcd.FancyPainter/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fancyPainterClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRsp, error) {
	out := new(UserLoginRsp)
	err := c.cc.Invoke(ctx, "/xgrpcd.FancyPainter/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fancyPainterClient) Helloworld(ctx context.Context, in *HelloworldReq, opts ...grpc.CallOption) (*HelloworldRsp, error) {
	out := new(HelloworldRsp)
	err := c.cc.Invoke(ctx, "/xgrpcd.FancyPainter/Helloworld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FancyPainterServer is the server API for FancyPainter service.
// All implementations must embed UnimplementedFancyPainterServer
// for forward compatibility
type FancyPainterServer interface {
	// 测试接口
	GetUser(context.Context, *UserReq) (*UserRsp, error)
	// 用户登录接口
	UserLogin(context.Context, *UserLoginReq) (*UserLoginRsp, error)
	// helloworld接口
	Helloworld(context.Context, *HelloworldReq) (*HelloworldRsp, error)
	mustEmbedUnimplementedFancyPainterServer()
}

// UnimplementedFancyPainterServer must be embedded to have forward compatible implementations.
type UnimplementedFancyPainterServer struct {
}

func (UnimplementedFancyPainterServer) GetUser(context.Context, *UserReq) (*UserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFancyPainterServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedFancyPainterServer) Helloworld(context.Context, *HelloworldReq) (*HelloworldRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Helloworld not implemented")
}
func (UnimplementedFancyPainterServer) mustEmbedUnimplementedFancyPainterServer() {}

// UnsafeFancyPainterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FancyPainterServer will
// result in compilation errors.
type UnsafeFancyPainterServer interface {
	mustEmbedUnimplementedFancyPainterServer()
}

func RegisterFancyPainterServer(s grpc.ServiceRegistrar, srv FancyPainterServer) {
	s.RegisterService(&FancyPainter_ServiceDesc, srv)
}

func _FancyPainter_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancyPainterServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpcd.FancyPainter/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancyPainterServer).GetUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FancyPainter_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancyPainterServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpcd.FancyPainter/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancyPainterServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FancyPainter_Helloworld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloworldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancyPainterServer).Helloworld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpcd.FancyPainter/Helloworld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancyPainterServer).Helloworld(ctx, req.(*HelloworldReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FancyPainter_ServiceDesc is the grpc.ServiceDesc for FancyPainter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FancyPainter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xgrpcd.FancyPainter",
	HandlerType: (*FancyPainterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _FancyPainter_GetUser_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _FancyPainter_UserLogin_Handler,
		},
		{
			MethodName: "Helloworld",
			Handler:    _FancyPainter_Helloworld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fancy_painter.proto",
}
